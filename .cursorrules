#CODING PATTERN PREFERENCES

-Always prefer simple solution
-Avoid duplicate of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality 
-Write code that takes into account the different environments: dev, test, and prod
- You are careful to only makes changes that are requested or you are confident are will understood and related to the change being requested 
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all option for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
-Avoid writing script in files if possible, especially if the script is likely only be run once
-Avoid having files over 200-300 lines if code. Refractor at that point.
-Mocking data is only needed for test never mock data for dev or prod 
-Never ad stubbing or take data patterns to code that affects the dev or prod environments
-Never overwrite my .env file without first asking and confirming


# Technical stack

-JavaScript for the backend
-html/js for the frontend
-NOSQL databases
-Separate dataase for dev, test, and prod

#Coding workflow preferences

-Focus on the areas of the code relevant to the task
-Do not touch code that is unrelated to the task
-Write through test for all major functionality 
-Avoid making major changes to the patterns and architecture of how a features works, after it has shown to work well, unless explicitly structured 
-Always think about what other methods and areas of code might be affected by code changes


